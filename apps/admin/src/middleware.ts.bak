import { NextResponse } from "next/server";
import { withAuth } from "next-auth/middleware";

// Middleware de autenticação que protege as rotas do painel admin
export default withAuth(
  // Função para personalizar o comportamento após verificar a autenticação
  function middleware(req) {
    const { pathname } = req.nextUrl;
    const { token } = req.nextauth;
    
    // Verificar se o usuário está autenticado e tem a role necessária
    if (!token) {
      // Se não estiver autenticado e não estiver na página de login, redireciona para login
      if (!pathname.startsWith("/login")) {
        return NextResponse.redirect(new URL("/login", req.url));
      }
      // Se já estiver na página de login, permite continuar
      return NextResponse.next();
    }
    
    // Se o usuário estiver autenticado e acessar a página de login, redireciona para o dashboard
    if (pathname.startsWith("/login")) {
      return NextResponse.redirect(new URL("/", req.url));
    }
    
    // Verificar se o usuário tem a role necessária para acessar o painel admin
    const userRole = token.role as string;
    if (userRole !== "admin" && userRole !== "super_admin") {
      // Se o usuário não tiver a role adequada, redirecionar para página de acesso negado
      return NextResponse.redirect(new URL("/acesso-negado", req.url));
    }
    
    // Permitir acesso às rotas protegidas
    return NextResponse.next();
  },
  {
    // Opções do middleware
    callbacks: {
      // Defina quando o middleware deve ser executado
      authorized: ({ token }) => {
        // Se houver um token, o usuário está autenticado
        return !!token;
      },
    },
    pages: {
      signIn: "/login",
    },
  }
);

// Configurar quais rotas devem ser protegidas pelo middleware
export const config = {
  // Protege todas as rotas exceto as explicitamente permitidas
  matcher: ["/((?!api/auth|_next/static|_next/image|favicon.ico|login).*)"],
};
